
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `-' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: ./shift_yosys_sta/lfsr.v
Parsing SystemVerilog input from `./shift_yosys_sta/lfsr.v' to AST representation.
Generating RTLIL representation for module `\lfsr'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: ./shift_yosys_sta/segment_hex.v
Parsing SystemVerilog input from `./shift_yosys_sta/segment_hex.v' to AST representation.
Generating RTLIL representation for module `\segment_hex'.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: ./shift_yosys_sta/top.v
Parsing SystemVerilog input from `./shift_yosys_sta/top.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/blackbox.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/blackbox.v' to AST representation.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v' to AST representation.
Generating RTLIL representation for module `\OPENROAD_CLKGATE'.
Successfully finished Verilog frontend.

6. Executing SYNTH pass.

6.1. Executing HIERARCHY pass (managing design hierarchy).

6.1.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \segment_hex
Used module:     \lfsr

6.1.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \segment_hex
Used module:     \lfsr
Removing unused module `\OPENROAD_CLKGATE'.
Removed 1 unused modules.

6.2. Executing PROC pass (convert processes to netlists).

6.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

6.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed 2 dead cases from process $proc$./shift_yosys_sta/segment_hex.v:23$6 in module segment_hex.
Marked 1 switch rules as full_case in process $proc$./shift_yosys_sta/segment_hex.v:23$6 in module segment_hex.
Marked 1 switch rules as full_case in process $proc$./shift_yosys_sta/lfsr.v:7$1 in module lfsr.
Removed a total of 2 dead cases.

6.2.3. Executing PROC_INIT pass (extract init attributes).

6.2.4. Executing PROC_ARST pass (detect async resets in processes).

6.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\segment_hex.$proc$./shift_yosys_sta/segment_hex.v:23$6'.
     1/2: $1\seg_display[7:0]
     2/2: $0\seg_display[7:0]
Creating decoders for process `\lfsr.$proc$./shift_yosys_sta/lfsr.v:7$1'.
     1/1: $0\dout[7:0]

6.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\segment_hex.\seg_display' from process `\segment_hex.$proc$./shift_yosys_sta/segment_hex.v:23$6'.

6.2.7. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\lfsr.\dout' using process `\lfsr.$proc$./shift_yosys_sta/lfsr.v:7$1'.
  created $dff cell `$procdff$27' with positive edge clock.

6.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\segment_hex.$proc$./shift_yosys_sta/segment_hex.v:23$6'.
Removing empty process `segment_hex.$proc$./shift_yosys_sta/segment_hex.v:23$6'.
Found and cleaned up 1 empty switch in `\lfsr.$proc$./shift_yosys_sta/lfsr.v:7$1'.
Removing empty process `lfsr.$proc$./shift_yosys_sta/lfsr.v:7$1'.
Cleaned up 2 empty switches.

6.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
Optimizing module segment_hex.
<suppressed ~1 debug messages>
Optimizing module lfsr.
<suppressed ~1 debug messages>

6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \lfsr..
Removed 1 unused cells and 6 unused wires.
<suppressed ~3 debug messages>

6.5. Executing CHECK pass (checking for obvious problems).
checking module lfsr..
checking module segment_hex..
checking module top..
found and reported 0 problems.

6.6. Executing OPT pass (performing simple optimizations).

6.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.6.9. Finished OPT passes. (There is nothing left to do.)

6.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 1 bits (of 4) from port B of cell segment_hex.$procmux$16_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell segment_hex.$procmux$17_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell segment_hex.$procmux$18_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell segment_hex.$procmux$19_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell segment_hex.$procmux$20_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell segment_hex.$procmux$21_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell segment_hex.$procmux$22_CMP0 ($eq).

6.8. Executing PEEPOPT pass (run peephole optimizers).

6.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.10. Executing TECHMAP pass (map to technology primitives).

6.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

6.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~244 debug messages>

6.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module lfsr:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module segment_hex:
  created 0 $alu and 0 $macc cells.
Extracting $alu and $macc cells in module top:
  created 0 $alu and 0 $macc cells.

6.12. Executing SHARE pass (SAT-based resource sharing).

6.13. Executing OPT pass (performing simple optimizations).

6.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.13.9. Finished OPT passes. (There is nothing left to do.)

6.14. Executing FSM pass (extract and optimize FSM).

6.14.1. Executing FSM_DETECT pass (finding FSMs in design).

6.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

6.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

6.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

6.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

6.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

6.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

6.15. Executing OPT pass (performing simple optimizations).

6.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.15.5. Finished fast OPT passes.

6.16. Executing MEMORY pass.

6.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

6.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

6.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

6.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.18. Executing OPT pass (performing simple optimizations).

6.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
<suppressed ~1 debug messages>
Optimizing module top.

6.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

6.18.5. Finished fast OPT passes.

6.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

6.20. Executing OPT pass (performing simple optimizations).

6.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
    Consolidated identical input bits for $pmux cell $procmux$7:
      Old ports: A=8'00000011, B=120'100111110010010100001101100110010100100101000001000111110000000100001001000100011100000101100011100001010110000101110001, Y=\seg_display
      New ports: A=7'0000001, B=105'100111100100100000110100110001001000100000000111100000000000100000100011000000110001100001001100000111000, Y=\seg_display [7:1]
      New connections: \seg_display [0] = 1'1
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 1 changes.

6.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

6.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.20.9. Rerunning OPT passes. (Maybe there is more to do..)

6.20.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.
<suppressed ~2 debug messages>

6.20.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 0 changes.

6.20.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.20.13. Executing OPT_RMDFF pass (remove dff with constant values).

6.20.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

6.20.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.20.16. Finished OPT passes. (There is nothing left to do.)

6.21. Executing TECHMAP pass (map to technology primitives).

6.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

6.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $eq.
Using template $paramod\_90_pmux\WIDTH=7\S_WIDTH=15 for cells of type $pmux.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $reduce_or.
No more expansions possible.
<suppressed ~56 debug messages>

6.22. Executing OPT pass (performing simple optimizations).

6.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
<suppressed ~205 debug messages>
Optimizing module top.

6.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
<suppressed ~168 debug messages>
Finding identical cells in module `\top'.
Removed a total of 56 cells.

6.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 97 unused wires.
<suppressed ~1 debug messages>

6.22.5. Finished fast OPT passes.

6.23. Executing ABC pass (technology mapping using ABC).

6.23.1. Extracting gate netlist of module `\lfsr' to `<abc-temp-dir>/input.blif'..
Extracted 11 gates and 28 wires to a netlist network with 17 inputs and 8 outputs.

6.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.23.1.2. Re-integrating ABC results.
ABC RESULTS:               MUX cells:        8
ABC RESULTS:              XNOR cells:        2
ABC RESULTS:               XOR cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:        8
Removing temp directory.

6.23.2. Extracting gate netlist of module `\segment_hex' to `<abc-temp-dir>/input.blif'..
Extracted 83 gates and 89 wires to a netlist network with 4 inputs and 7 outputs.

6.23.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

6.23.2.2. Re-integrating ABC results.
ABC RESULTS:            ANDNOT cells:       11
ABC RESULTS:              AOI3 cells:        9
ABC RESULTS:              AOI4 cells:        5
ABC RESULTS:              NAND cells:        2
ABC RESULTS:               NOR cells:       10
ABC RESULTS:               NOT cells:        2
ABC RESULTS:              OAI3 cells:        1
ABC RESULTS:                OR cells:       11
ABC RESULTS:             ORNOT cells:        7
ABC RESULTS:        internal signals:       78
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7
Removing temp directory.

6.23.3. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

6.24. Executing OPT pass (performing simple optimizations).

6.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

6.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

6.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

6.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 86 unused wires.
<suppressed ~2 debug messages>

6.24.5. Finished fast OPT passes.

6.25. Executing HIERARCHY pass (managing design hierarchy).

6.25.1. Analyzing design hierarchy..
Top module:  \top
Used module:     \lfsr
Used module:     \segment_hex

6.25.2. Analyzing design hierarchy..
Top module:  \top
Used module:     \lfsr
Used module:     \segment_hex
Removed 0 unused modules.

6.26. Printing statistics.

=== lfsr ===

   Number of wires:                  8
   Number of wire bits:             29
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 19
     $_DFF_P_                        8
     $_MUX_                          8
     $_XNOR_                         2
     $_XOR_                          1

=== segment_hex ===

   Number of wires:                 53
   Number of wire bits:             63
   Number of public wires:           2
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 58
     $_ANDNOT_                      11
     $_AOI3_                         9
     $_AOI4_                         5
     $_NAND_                         2
     $_NOR_                         10
     $_NOT_                          2
     $_OAI3_                         1
     $_ORNOT_                        7
     $_OR_                          11

=== top ===

   Number of wires:                  5
   Number of wire bits:             34
   Number of public wires:           5
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     lfsr                            1
     segment_hex                     2

=== design hierarchy ===

   top                               1
     lfsr                            1
     segment_hex                     2

   Number of wires:                119
   Number of wire bits:            189
   Number of public wires:          13
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                135
     $_ANDNOT_                      22
     $_AOI3_                        18
     $_AOI4_                        10
     $_DFF_P_                        8
     $_MUX_                          8
     $_NAND_                         4
     $_NOR_                         20
     $_NOT_                          4
     $_OAI3_                         2
     $_ORNOT_                       14
     $_OR_                          22
     $_XNOR_                         2
     $_XOR_                          1

6.27. Executing CHECK pass (checking for obvious problems).
checking module lfsr..
checking module segment_hex..
checking module top..
found and reported 0 problems.

7. Executing OPT pass (performing simple optimizations).

7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 0 changes.

7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

7.6. Executing OPT_RMDFF pass (remove dff with constant values).

7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

7.9. Finished OPT passes. (There is nothing left to do.)

8. Executing TECHMAP pass (map to technology primitives).

8.1. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_latch.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_latch.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

8.2. Continuing TECHMAP pass.
No more expansions possible.

9. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\lfsr':
  mapped 8 $_DFF_P_ cells to \DFF_X1 cells.
Mapping DFF cells in module `\segment_hex':
Mapping DFF cells in module `\top':

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \lfsr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \segment_hex..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \lfsr.
  Optimizing cells in module \segment_hex.
  Optimizing cells in module \top.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\lfsr'.
Finding identical cells in module `\segment_hex'.
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.6. Executing OPT_RMDFF pass (remove dff with constant values).

10.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..

10.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module lfsr.
Optimizing module segment_hex.
Optimizing module top.

10.9. Finished OPT passes. (There is nothing left to do.)

11. Executing ABC pass (technology mapping using ABC).

11.1. Extracting gate netlist of module `\lfsr' to `/tmp/yosys-abc-X23pIG/input.blif'..
Extracted 11 gates and 28 wires to a netlist network with 17 inputs and 8 outputs.

11.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f /tmp/yosys-abc-X23pIG/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-X23pIG/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-X23pIG/input.blif 
ABC: + read_lib -w /home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib 
ABC: Parsing finished successfully.  Parsing time =     0.12 sec
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_1024x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_2048x39" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x34" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x95" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_32x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_512x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x15" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x21" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x7" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "nangate45_merged" from "/home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib" has 88 cells (47 skipped: 21 seq; 6 tri-state; 20 no func; 7 dont_use).  Time =     0.17 sec
ABC: Memory =    8.88 MB. Time =     0.17 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + retime -D -D 10000.0 -M 6 
ABC: + strash 
ABC: + dch -f 
ABC: + map -p -M 1 -D 10000.0 -f 
ABC: + topo 
ABC: + dnsize 
ABC: + buffer -p 
ABC: + upsize 
ABC: + 
ABC: + write_blif /tmp/yosys-abc-X23pIG/output.blif 

11.1.2. Re-integrating ABC results.
ABC RESULTS:           MUX2_X1 cells:        7
ABC RESULTS:           MUX2_X2 cells:        1
ABC RESULTS:          XNOR2_X1 cells:        1
ABC RESULTS:          XNOR2_X2 cells:        1
ABC RESULTS:           XOR2_X2 cells:        1
ABC RESULTS:        internal signals:        3
ABC RESULTS:           input signals:       17
ABC RESULTS:          output signals:        8
Removing temp directory.

11.2. Extracting gate netlist of module `\segment_hex' to `/tmp/yosys-abc-4uvDug/input.blif'..
Extracted 58 gates and 62 wires to a netlist network with 4 inputs and 7 outputs.

11.2.1. Executing ABC.
Running ABC command: berkeley-abc -s -f /tmp/yosys-abc-4uvDug/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-4uvDug/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-4uvDug/input.blif 
ABC: + read_lib -w /home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib 
ABC: Parsing finished successfully.  Parsing time =     0.12 sec
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_1024x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_2048x39" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x34" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x95" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_32x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_512x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x15" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x21" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x7" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "nangate45_merged" from "/home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib" has 88 cells (47 skipped: 21 seq; 6 tri-state; 20 no func; 7 dont_use).  Time =     0.18 sec
ABC: Memory =    8.88 MB. Time =     0.18 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + retime -D -D 10000.0 -M 6 
ABC: + strash 
ABC: + dch -f 
ABC: + map -p -M 1 -D 10000.0 -f 
ABC: + topo 
ABC: + dnsize 
ABC: + buffer -p 
ABC: + upsize 
ABC: + 
ABC: + write_blif /tmp/yosys-abc-4uvDug/output.blif 

11.2.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X2 cells:        1
ABC RESULTS:           AND2_X4 cells:        2
ABC RESULTS:          AOI21_X4 cells:        1
ABC RESULTS:          AOI22_X1 cells:        2
ABC RESULTS:            INV_X1 cells:        6
ABC RESULTS:           INV_X16 cells:        2
ABC RESULTS:           INV_X32 cells:        1
ABC RESULTS:          NAND2_X1 cells:        2
ABC RESULTS:          NAND3_X1 cells:        1
ABC RESULTS:          NAND4_X1 cells:        1
ABC RESULTS:           NOR2_X1 cells:        3
ABC RESULTS:           NOR2_X2 cells:        1
ABC RESULTS:           NOR2_X4 cells:        2
ABC RESULTS:         OAI211_X2 cells:        5
ABC RESULTS:          OAI21_X1 cells:        3
ABC RESULTS:         OAI221_X1 cells:        1
ABC RESULTS:        internal signals:       51
ABC RESULTS:           input signals:        4
ABC RESULTS:          output signals:        7
Removing temp directory.

11.3. Extracting gate netlist of module `\top' to `/tmp/yosys-abc-Bk475u/input.blif'..
Extracted 0 gates and 0 wires to a netlist network with 0 inputs and 0 outputs.
Don't call ABC as there is nothing to map.
Removing temp directory.

12. Executing HILOMAP pass (mapping to constant drivers).

13. Executing SETUNDEF pass (replace undef values with defined constants).

14. Executing SPLITNETS pass (splitting up multi-bit signals).

15. Executing INSBUF pass (insert buffer cells for connected wires).
Added lfsr.$auto$insbuf.cc:79:execute$726: \din [0] -> $abc$676$din[0]
Added lfsr.$auto$insbuf.cc:79:execute$727: \dout [1] -> $abc$676$dout[1]
Added lfsr.$auto$insbuf.cc:79:execute$728: \rst_n -> $abc$676$rst_n
Added lfsr.$auto$insbuf.cc:79:execute$729: $abc$676$0\dout[7:0][0] -> $0\dout[7:0][0]
Added lfsr.$auto$insbuf.cc:79:execute$730: \din [1] -> $abc$676$din[1]
Added lfsr.$auto$insbuf.cc:79:execute$731: \dout [2] -> $abc$676$dout[2]
Added lfsr.$auto$insbuf.cc:79:execute$732: $abc$676$0\dout[7:0][1] -> $0\dout[7:0][1]
Added lfsr.$auto$insbuf.cc:79:execute$733: \din [2] -> $abc$676$din[2]
Added lfsr.$auto$insbuf.cc:79:execute$734: \dout [3] -> $abc$676$dout[3]
Added lfsr.$auto$insbuf.cc:79:execute$735: $abc$676$0\dout[7:0][2] -> $0\dout[7:0][2]
Added lfsr.$auto$insbuf.cc:79:execute$736: \din [3] -> $abc$676$din[3]
Added lfsr.$auto$insbuf.cc:79:execute$737: \dout [4] -> $abc$676$dout[4]
Added lfsr.$auto$insbuf.cc:79:execute$738: $abc$676$0\dout[7:0][3] -> $0\dout[7:0][3]
Added lfsr.$auto$insbuf.cc:79:execute$739: \din [4] -> $abc$676$din[4]
Added lfsr.$auto$insbuf.cc:79:execute$740: \dout [5] -> $abc$676$dout[5]
Added lfsr.$auto$insbuf.cc:79:execute$741: $abc$676$0\dout[7:0][4] -> $0\dout[7:0][4]
Added lfsr.$auto$insbuf.cc:79:execute$742: \din [5] -> $abc$676$din[5]
Added lfsr.$auto$insbuf.cc:79:execute$743: \dout [6] -> $abc$676$dout[6]
Added lfsr.$auto$insbuf.cc:79:execute$744: $abc$676$0\dout[7:0][5] -> $0\dout[7:0][5]
Added lfsr.$auto$insbuf.cc:79:execute$745: \din [6] -> $abc$676$din[6]
Added lfsr.$auto$insbuf.cc:79:execute$746: \dout [7] -> $abc$676$dout[7]
Added lfsr.$auto$insbuf.cc:79:execute$747: $abc$676$0\dout[7:0][6] -> $0\dout[7:0][6]
Added lfsr.$auto$insbuf.cc:79:execute$748: \dout [0] -> $abc$676$dout[0]
Added lfsr.$auto$insbuf.cc:79:execute$749: \din [7] -> $abc$676$din[7]
Added lfsr.$auto$insbuf.cc:79:execute$750: $abc$676$0\dout[7:0][7] -> $0\dout[7:0][7]
Added segment_hex.$auto$insbuf.cc:79:execute$751: $auto$hilomap.cc:39:hilomap_worker$724 -> \seg_display [0]
Added segment_hex.$auto$insbuf.cc:79:execute$752: \bcd [3] -> $abc$688$bcd[3]
Added segment_hex.$auto$insbuf.cc:79:execute$753: \bcd [2] -> $abc$688$bcd[2]
Added segment_hex.$auto$insbuf.cc:79:execute$754: \bcd [1] -> $abc$688$bcd[1]
Added segment_hex.$auto$insbuf.cc:79:execute$755: \bcd [0] -> $abc$688$bcd[0]
Added segment_hex.$auto$insbuf.cc:79:execute$756: $abc$688$seg_display[1] -> \seg_display [1]
Added segment_hex.$auto$insbuf.cc:79:execute$757: $abc$688$seg_display[2] -> \seg_display [2]
Added segment_hex.$auto$insbuf.cc:79:execute$758: $abc$688$seg_display[3] -> \seg_display [3]
Added segment_hex.$auto$insbuf.cc:79:execute$759: $abc$688$seg_display[4] -> \seg_display [4]
Added segment_hex.$auto$insbuf.cc:79:execute$760: $abc$688$seg_display[5] -> \seg_display [5]
Added segment_hex.$auto$insbuf.cc:79:execute$761: $abc$688$seg_display[6] -> \seg_display [6]
Added segment_hex.$auto$insbuf.cc:79:execute$762: $abc$688$seg_display[7] -> \seg_display [7]

16. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \lfsr..
Finding unused cells or wires in module \segment_hex..
Finding unused cells or wires in module \top..
Removed 0 unused cells and 54 unused wires.
<suppressed ~2 debug messages>

17. Executing CHECK pass (checking for obvious problems).
checking module lfsr..
Warning: Wire lfsr.\dout [7] is used but has no driver.
Warning: Wire lfsr.\dout [6] is used but has no driver.
Warning: Wire lfsr.\dout [5] is used but has no driver.
Warning: Wire lfsr.\dout [4] is used but has no driver.
Warning: Wire lfsr.\dout [3] is used but has no driver.
Warning: Wire lfsr.\dout [2] is used but has no driver.
Warning: Wire lfsr.\dout [1] is used but has no driver.
Warning: Wire lfsr.\dout [0] is used but has no driver.
checking module segment_hex..
Warning: Wire segment_hex.\seg_display [7] is used but has no driver.
Warning: Wire segment_hex.\seg_display [6] is used but has no driver.
Warning: Wire segment_hex.\seg_display [5] is used but has no driver.
Warning: Wire segment_hex.\seg_display [4] is used but has no driver.
Warning: Wire segment_hex.\seg_display [3] is used but has no driver.
Warning: Wire segment_hex.\seg_display [2] is used but has no driver.
Warning: Wire segment_hex.\seg_display [1] is used but has no driver.
Warning: Wire segment_hex.\seg_display [0] is used but has no driver.
checking module top..
found and reported 16 problems.

18. Printing statistics.

=== lfsr ===

   Number of wires:                 48
   Number of wire bits:             62
   Number of public wires:           4
   Number of public wire bits:      18
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 44
     BUF_X1                         25
     DFF_X1                          8
     MUX2_X1                         7
     MUX2_X2                         1
     XNOR2_X1                        1
     XNOR2_X2                        1
     XOR2_X2                         1

   Chip area for module '\lfsr': 78.204000

=== segment_hex ===

   Number of wires:                 41
   Number of wire bits:             51
   Number of public wires:           2
   Number of public wire bits:      12
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 47
     AND2_X2                         1
     AND2_X4                         2
     AOI21_X4                        1
     AOI22_X1                        2
     BUF_X1                         12
     INV_X1                          6
     INV_X16                         2
     INV_X32                         1
     LOGIC1_X1                       1
     NAND2_X1                        2
     NAND3_X1                        1
     NAND4_X1                        1
     NOR2_X1                         3
     NOR2_X2                         1
     NOR2_X4                         2
     OAI211_X2                       5
     OAI21_X1                        3
     OAI221_X1                       1

   Chip area for module '\segment_hex': 72.618000

=== top ===

   Number of wires:                 12
   Number of wire bits:             34
   Number of public wires:          12
   Number of public wire bits:      34
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  3
     lfsr                            1
     segment_hex                     2

   Area for cell type \lfsr is unknown!
   Area for cell type \segment_hex is unknown!

=== design hierarchy ===

   top                               1
     lfsr                            1
     segment_hex                     2

   Number of wires:                142
   Number of wire bits:            198
   Number of public wires:          20
   Number of public wire bits:      76
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                138
     AND2_X2                         2
     AND2_X4                         4
     AOI21_X4                        2
     AOI22_X1                        4
     BUF_X1                         49
     DFF_X1                          8
     INV_X1                         12
     INV_X16                         4
     INV_X32                         2
     LOGIC1_X1                       2
     MUX2_X1                         7
     MUX2_X2                         1
     NAND2_X1                        4
     NAND3_X1                        2
     NAND4_X1                        2
     NOR2_X1                         6
     NOR2_X2                         2
     NOR2_X4                         4
     OAI211_X2                      10
     OAI21_X1                        6
     OAI221_X1                       2
     XNOR2_X1                        1
     XNOR2_X2                        1
     XOR2_X2                         1

   Chip area for top module '\top': 223.440000

19. Executing Verilog backend.
Dumping module `\lfsr'.
Dumping module `\segment_hex'.
Dumping module `\top'.

Warnings: 24 unique messages, 88 total
End of script. Logfile hash: ee1eb43383
CPU: user 0.53s system 0.29s, MEM: 42.12 MB total, 29.50 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 27% 2x stat (0 sec), 24% 1x dfflibmap (0 sec), ...
