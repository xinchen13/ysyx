
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2019  Clifford Wolf <clifford@clifford.at>           |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9 (git sha1 1979e0b)


-- Executing script file `-' --
[TCL: yosys -import] Command name collision: found pre-existing command `cd' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `eval' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `read' -> skip.
[TCL: yosys -import] Command name collision: found pre-existing command `trace' -> skip.

1. Executing Verilog-2005 frontend: ./alu_yosys_sta_case0/alu0.sv
Parsing SystemVerilog input from `./alu_yosys_sta_case0/alu0.sv' to AST representation.
Generating RTLIL representation for module `\alu0'.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/blackbox.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/blackbox.v' to AST representation.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_clkgate.v' to AST representation.
Generating RTLIL representation for module `\OPENROAD_CLKGATE'.
Successfully finished Verilog frontend.

4. Executing SYNTH pass.

4.1. Executing HIERARCHY pass (managing design hierarchy).

4.1.1. Analyzing design hierarchy..
Top module:  \alu0

4.1.2. Analyzing design hierarchy..
Top module:  \alu0
Removing unused module `\OPENROAD_CLKGATE'.
Removed 1 unused modules.

4.2. Executing PROC pass (convert processes to netlists).

4.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 1 switch rules as full_case in process $proc$./alu_yosys_sta_case0/alu0.sv:18$4 in module alu0.
Removed a total of 0 dead cases.

4.2.3. Executing PROC_INIT pass (extract init attributes).

4.2.4. Executing PROC_ARST pass (detect async resets in processes).

4.2.5. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\alu0.$proc$./alu_yosys_sta_case0/alu0.sv:18$4'.
     1/2: $1\result[31:0]
     2/2: $0\result[31:0]

4.2.6. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\alu0.\result' from process `\alu0.$proc$./alu_yosys_sta_case0/alu0.sv:18$4'.

4.2.7. Executing PROC_DFF pass (convert process syncs to FFs).

4.2.8. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Found and cleaned up 1 empty switch in `\alu0.$proc$./alu_yosys_sta_case0/alu0.sv:18$4'.
Removing empty process `alu0.$proc$./alu_yosys_sta_case0/alu0.sv:18$4'.
Cleaned up 1 empty switch.

4.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..
Removed 0 unused cells and 4 unused wires.
<suppressed ~1 debug messages>

4.5. Executing CHECK pass (checking for obvious problems).
checking module alu0..
found and reported 0 problems.

4.6. Executing OPT pass (performing simple optimizations).

4.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

4.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.6.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.6.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.6.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.6.9. Finished OPT passes. (There is nothing left to do.)

4.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 31 bits (of 32) from port B of cell alu0.$add$./alu_yosys_sta_case0/alu0.sv:16$3 ($add).

4.8. Executing PEEPOPT pass (run peephole optimizers).

4.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.10. Executing TECHMAP pass (map to technology primitives).

4.10.1. Executing Verilog-2005 frontend: /usr/bin/../share/yosys/cmp2lut.v
Parsing Verilog input from `/usr/bin/../share/yosys/cmp2lut.v' to AST representation.
Generating RTLIL representation for module `\_90_lut_cmp_'.
Successfully finished Verilog frontend.

4.10.2. Continuing TECHMAP pass.
No more expansions possible.
<suppressed ~20 debug messages>

4.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module alu0:
  creating $macc model for $add$./alu_yosys_sta_case0/alu0.sv:16$2 ($add).
  creating $macc model for $add$./alu_yosys_sta_case0/alu0.sv:16$3 ($add).
  merging $macc model for $add$./alu_yosys_sta_case0/alu0.sv:16$2 into $add$./alu_yosys_sta_case0/alu0.sv:16$3.
  creating $alu model for $macc $add$./alu_yosys_sta_case0/alu0.sv:16$3.
  creating $alu cell for $add$./alu_yosys_sta_case0/alu0.sv:16$3: $auto$alumacc.cc:474:replace_alu$8
  created 1 $alu and 0 $macc cells.

4.12. Executing SHARE pass (SAT-based resource sharing).

4.13. Executing OPT pass (performing simple optimizations).

4.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

4.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.13.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..
Removed 1 unused cells and 1 unused wires.
<suppressed ~2 debug messages>

4.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.13.9. Rerunning OPT passes. (Maybe there is more to do..)

4.13.10. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.13.11. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

4.13.12. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.13.13. Executing OPT_RMDFF pass (remove dff with constant values).

4.13.14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.13.15. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.13.16. Finished OPT passes. (There is nothing left to do.)

4.14. Executing FSM pass (extract and optimize FSM).

4.14.1. Executing FSM_DETECT pass (finding FSMs in design).

4.14.2. Executing FSM_EXTRACT pass (extracting FSM from design).

4.14.3. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.14.5. Executing FSM_OPT pass (simple optimizations of FSMs).

4.14.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

4.14.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

4.14.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

4.15. Executing OPT pass (performing simple optimizations).

4.15.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.15.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.15.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.15.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.15.5. Finished fast OPT passes.

4.16. Executing MEMORY pass.

4.16.1. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

4.16.2. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.16.3. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

4.16.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.16.5. Executing MEMORY_COLLECT pass (generating $mem cells).

4.17. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.18. Executing OPT pass (performing simple optimizations).

4.18.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.18.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.18.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.18.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.18.5. Finished fast OPT passes.

4.19. Executing MEMORY_MAP pass (converting $mem cells to logic and flip-flops).

4.20. Executing OPT pass (performing simple optimizations).

4.20.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.20.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.20.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~1 debug messages>

4.20.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

4.20.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.20.6. Executing OPT_RMDFF pass (remove dff with constant values).

4.20.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

4.20.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.20.9. Finished OPT passes. (There is nothing left to do.)

4.21. Executing TECHMAP pass (map to technology primitives).

4.21.1. Executing Verilog-2005 frontend: <techmap.v>
Parsing Verilog input from `<techmap.v>' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

4.21.2. Continuing TECHMAP pass.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $eq.
Using extmapper simplemap for cells of type $mux.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=32\B_WIDTH=32\Y_WIDTH=32 for cells of type $alu.
Using extmapper simplemap for cells of type $and.
Using extmapper simplemap for cells of type $xor.
Using template $paramod\_90_lcu\WIDTH=32 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~350 debug messages>

4.22. Executing OPT pass (performing simple optimizations).

4.22.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.
<suppressed ~69 debug messages>

4.22.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.22.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.22.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..
Removed 48 unused cells and 39 unused wires.
<suppressed ~49 debug messages>

4.22.5. Finished fast OPT passes.

4.23. Executing ABC pass (technology mapping using ABC).

4.23.1. Extracting gate netlist of module `\alu0' to `<abc-temp-dir>/input.blif'..
Extracted 290 gates and 360 wires to a netlist network with 68 inputs and 32 outputs.

4.23.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_library <abc-temp-dir>/stdcells.genlib 
ABC: Entered genlib library with 17 gates from file "<abc-temp-dir>/stdcells.genlib".
ABC: + strash 
ABC: + dretime 
ABC: + retime 
ABC: + map 
ABC: + write_blif <abc-temp-dir>/output.blif 

4.23.1.2. Re-integrating ABC results.
ABC RESULTS:               AND cells:        2
ABC RESULTS:            ANDNOT cells:       62
ABC RESULTS:              AOI3 cells:       16
ABC RESULTS:              NAND cells:        1
ABC RESULTS:               NOR cells:        9
ABC RESULTS:               NOT cells:       16
ABC RESULTS:              OAI3 cells:       24
ABC RESULTS:                OR cells:       13
ABC RESULTS:             ORNOT cells:       29
ABC RESULTS:              XNOR cells:       22
ABC RESULTS:               XOR cells:       43
ABC RESULTS:        internal signals:      260
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       32
Removing temp directory.

4.24. Executing OPT pass (performing simple optimizations).

4.24.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

4.24.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

4.24.3. Executing OPT_RMDFF pass (remove dff with constant values).

4.24.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..
Removed 0 unused cells and 205 unused wires.
<suppressed ~2 debug messages>

4.24.5. Finished fast OPT passes.

4.25. Executing HIERARCHY pass (managing design hierarchy).

4.25.1. Analyzing design hierarchy..
Top module:  \alu0

4.25.2. Analyzing design hierarchy..
Top module:  \alu0
Removed 0 unused modules.

4.26. Printing statistics.

=== alu0 ===

   Number of wires:                210
   Number of wire bits:            306
   Number of public wires:           5
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                237
     $_ANDNOT_                      62
     $_AND_                          2
     $_AOI3_                        16
     $_NAND_                         1
     $_NOR_                          9
     $_NOT_                         16
     $_OAI3_                        24
     $_ORNOT_                       29
     $_OR_                          13
     $_XNOR_                        22
     $_XOR_                         43

4.27. Executing CHECK pass (checking for obvious problems).
checking module alu0..
found and reported 0 problems.

5. Executing OPT pass (performing simple optimizations).

5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

5.6. Executing OPT_RMDFF pass (remove dff with constant values).

5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

5.9. Finished OPT passes. (There is nothing left to do.)

6. Executing TECHMAP pass (map to technology primitives).

6.1. Executing Verilog-2005 frontend: /home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_latch.v
Parsing Verilog input from `/home/xinchen/yosys-sta/scripts/../nangate45/verilog/cells_latch.v' to AST representation.
Generating RTLIL representation for module `\$_DLATCH_P_'.
Generating RTLIL representation for module `\$_DLATCH_N_'.
Successfully finished Verilog frontend.

6.2. Continuing TECHMAP pass.
No more expansions possible.

7. Executing DFFLIBMAP pass (mapping DFF cells to sequential cells from liberty file).
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFF_X1 (noninv, pins=4, area=4.52) is a direct match for cell type $_DFF_P_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFR_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN0_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFS_X1 (noninv, pins=5, area=5.32) is a direct match for cell type $_DFF_PN1_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  cell DFFRS_X1 (noninv, pins=6, area=6.38) is a direct match for cell type $_DFFSR_PNN_.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFRS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFR_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFFS_X2' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X1' - skipping.
Warning: Found unsupported expression 'SE*SI+D*!SE' in pin attribute of cell 'SDFF_X2' - skipping.
  create mapping for $_DFF_PP0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_PP1_ from mapping for $_DFF_PN1_.
  create mapping for $_DFFSR_PPN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PNP_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_PPP_ from mapping for $_DFFSR_PNP_.
  create mapping for $_DFF_N_ from mapping for $_DFF_P_.
  create mapping for $_DFF_NN0_ from mapping for $_DFF_PN0_.
  create mapping for $_DFF_NP0_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NN1_ from mapping for $_DFF_NN0_.
  create mapping for $_DFF_NP1_ from mapping for $_DFF_NN1_.
  create mapping for $_DFFSR_NNN_ from mapping for $_DFFSR_PNN_.
  create mapping for $_DFFSR_NPN_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NNP_ from mapping for $_DFFSR_NNN_.
  create mapping for $_DFFSR_NPP_ from mapping for $_DFFSR_NNP_.
  final dff cell mappings:
    DFF_X1 _DFF_N_ (.CK(~C), .D( D), .Q( Q), .QN(~Q));
    DFF_X1 _DFF_P_ (.CK( C), .D( D), .Q( Q), .QN(~Q));
    DFFR_X1 _DFF_NN0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFR_X1 _DFF_NN1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN( R));
    DFFR_X1 _DFF_NP0_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFR_X1 _DFF_NP1_ (.CK(~C), .D(~D), .Q(~Q), .QN( Q), .RN(~R));
    DFFR_X1 _DFF_PN0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R));
    DFFS_X1 _DFF_PN1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN( R));
    DFFR_X1 _DFF_PP0_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R));
    DFFS_X1 _DFF_PP1_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .SN(~R));
    DFFRS_X1 _DFFSR_NNN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_NNP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_NPN_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_NPP_ (.CK(~C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
    DFFRS_X1 _DFFSR_PNN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN( S));
    DFFRS_X1 _DFFSR_PNP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN( S));
    DFFRS_X1 _DFFSR_PPN_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN( R), .SN(~S));
    DFFRS_X1 _DFFSR_PPP_ (.CK( C), .D( D), .Q( Q), .QN(~Q), .RN(~R), .SN(~S));
Mapping DFF cells in module `\alu0':

8. Executing OPT pass (performing simple optimizations).

8.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

8.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

8.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \alu0..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \alu0.
Performed a total of 0 changes.

8.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\alu0'.
Removed a total of 0 cells.

8.6. Executing OPT_RMDFF pass (remove dff with constant values).

8.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..

8.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module alu0.

8.9. Finished OPT passes. (There is nothing left to do.)

9. Executing ABC pass (technology mapping using ABC).

9.1. Extracting gate netlist of module `\alu0' to `/tmp/yosys-abc-kRzHBz/input.blif'..
Extracted 237 gates and 305 wires to a netlist network with 68 inputs and 32 outputs.

9.1.1. Executing ABC.
Running ABC command: berkeley-abc -s -f /tmp/yosys-abc-kRzHBz/abc.script 2>&1
ABC: ABC command line: "source /tmp/yosys-abc-kRzHBz/abc.script".
ABC: 
ABC: + read_blif /tmp/yosys-abc-kRzHBz/input.blif 
ABC: + read_lib -w /home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib 
ABC: Parsing finished successfully.  Parsing time =     0.10 sec
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_1024x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_2048x39" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x34" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x95" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_256x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_32x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_512x64" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x15" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x21" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x32" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x7" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "fakeram45_64x96" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "ANTENNA_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATETST_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X1" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X2" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X4" without logic function.
ABC: Scl_LibertyReadGenlib() skipped cell "CLKGATE_X8" without logic function.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DFF_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLH_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "DLL_X2".
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X2" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X4" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X8" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "FILLCELL_X32" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC0_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped cell "LOGIC1_X1" due to dont_use attribute.
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFRS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFR_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFFS_X2".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "SDFF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X1".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X2".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X4".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X8".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TBUF_X16".
ABC: Scl_LibertyReadGenlib() skipped three-state cell "TINV_X1".
ABC: Scl_LibertyReadGenlib() skipped sequential cell "TLAT_X1".
ABC: Library "nangate45_merged" from "/home/xinchen/yosys-sta/scripts/../nangate45/lib/merged.lib" has 88 cells (47 skipped: 21 seq; 6 tri-state; 20 no func; 7 dont_use).  Time =     0.14 sec
ABC: Memory =    8.88 MB. Time =     0.14 sec
ABC: Warning: Detected 2 multi-output gates (for example, "FA_X1").
ABC: + strash 
ABC: + ifraig 
ABC: + retime -D -D 10000.0 -M 6 
ABC: + strash 
ABC: + dch -f 
ABC: + map -p -M 1 -D 10000.0 -f 
ABC: + topo 
ABC: + dnsize 
ABC: + buffer -p 
ABC: + upsize 
ABC: + 
ABC: + write_blif /tmp/yosys-abc-kRzHBz/output.blif 

9.1.2. Re-integrating ABC results.
ABC RESULTS:           AND2_X1 cells:       24
ABC RESULTS:           AND2_X2 cells:        8
ABC RESULTS:           AND2_X4 cells:        4
ABC RESULTS:           AND3_X1 cells:        7
ABC RESULTS:           AND3_X4 cells:        3
ABC RESULTS:           AND4_X1 cells:        1
ABC RESULTS:         AOI211_X2 cells:        1
ABC RESULTS:         AOI211_X4 cells:        2
ABC RESULTS:          AOI21_X1 cells:       24
ABC RESULTS:          AOI21_X2 cells:        4
ABC RESULTS:          AOI21_X4 cells:        3
ABC RESULTS:         AOI221_X1 cells:        1
ABC RESULTS:         AOI221_X4 cells:        1
ABC RESULTS:            BUF_X2 cells:        1
ABC RESULTS:            BUF_X4 cells:        1
ABC RESULTS:            INV_X1 cells:       58
ABC RESULTS:            INV_X2 cells:        3
ABC RESULTS:            INV_X4 cells:        2
ABC RESULTS:          NAND2_X1 cells:        8
ABC RESULTS:          NAND2_X2 cells:        1
ABC RESULTS:          NAND2_X4 cells:        1
ABC RESULTS:          NAND3_X1 cells:        1
ABC RESULTS:          NAND3_X4 cells:        1
ABC RESULTS:           NOR2_X1 cells:       30
ABC RESULTS:           NOR2_X2 cells:        5
ABC RESULTS:           NOR2_X4 cells:        4
ABC RESULTS:           NOR3_X1 cells:       10
ABC RESULTS:           NOR4_X1 cells:        3
ABC RESULTS:         OAI211_X2 cells:        1
ABC RESULTS:         OAI211_X4 cells:        1
ABC RESULTS:          OAI21_X1 cells:       20
ABC RESULTS:          OAI21_X4 cells:        1
ABC RESULTS:         OAI221_X1 cells:        1
ABC RESULTS:            OR2_X1 cells:        4
ABC RESULTS:            OR2_X4 cells:        1
ABC RESULTS:            OR3_X1 cells:        3
ABC RESULTS:            OR3_X2 cells:        1
ABC RESULTS:            OR3_X4 cells:        3
ABC RESULTS:          XNOR2_X1 cells:       22
ABC RESULTS:          XNOR2_X2 cells:        9
ABC RESULTS:           XOR2_X1 cells:        1
ABC RESULTS:        internal signals:      205
ABC RESULTS:           input signals:       68
ABC RESULTS:          output signals:       32
Removing temp directory.

10. Executing HILOMAP pass (mapping to constant drivers).

11. Executing SETUNDEF pass (replace undef values with defined constants).

12. Executing SPLITNETS pass (splitting up multi-bit signals).

13. Executing INSBUF pass (insert buffer cells for connected wires).
Added alu0.$auto$insbuf.cc:79:execute$1202: \a [0] -> $abc$921$a[0]
Added alu0.$auto$insbuf.cc:79:execute$1203: \b [0] -> $abc$921$b[0]
Added alu0.$auto$insbuf.cc:79:execute$1204: \ctrl [1] -> $abc$921$ctrl[1]
Added alu0.$auto$insbuf.cc:79:execute$1205: \ctrl [0] -> $abc$921$ctrl[0]
Added alu0.$auto$insbuf.cc:79:execute$1206: \ctrl [2] -> $abc$921$ctrl[2]
Added alu0.$auto$insbuf.cc:79:execute$1207: \ctrl [3] -> $abc$921$ctrl[3]
Added alu0.$auto$insbuf.cc:79:execute$1208: $abc$921$result[0] -> \result [0]
Added alu0.$auto$insbuf.cc:79:execute$1209: \a [1] -> $abc$921$a[1]
Added alu0.$auto$insbuf.cc:79:execute$1210: \b [1] -> $abc$921$b[1]
Added alu0.$auto$insbuf.cc:79:execute$1211: $abc$921$result[1] -> \result [1]
Added alu0.$auto$insbuf.cc:79:execute$1212: \a [2] -> $abc$921$a[2]
Added alu0.$auto$insbuf.cc:79:execute$1213: \b [2] -> $abc$921$b[2]
Added alu0.$auto$insbuf.cc:79:execute$1214: $abc$921$result[2] -> \result [2]
Added alu0.$auto$insbuf.cc:79:execute$1215: \a [3] -> $abc$921$a[3]
Added alu0.$auto$insbuf.cc:79:execute$1216: \b [3] -> $abc$921$b[3]
Added alu0.$auto$insbuf.cc:79:execute$1217: $abc$921$result[3] -> \result [3]
Added alu0.$auto$insbuf.cc:79:execute$1218: \a [4] -> $abc$921$a[4]
Added alu0.$auto$insbuf.cc:79:execute$1219: \b [4] -> $abc$921$b[4]
Added alu0.$auto$insbuf.cc:79:execute$1220: $abc$921$result[4] -> \result [4]
Added alu0.$auto$insbuf.cc:79:execute$1221: \a [5] -> $abc$921$a[5]
Added alu0.$auto$insbuf.cc:79:execute$1222: \b [5] -> $abc$921$b[5]
Added alu0.$auto$insbuf.cc:79:execute$1223: $abc$921$result[5] -> \result [5]
Added alu0.$auto$insbuf.cc:79:execute$1224: \a [6] -> $abc$921$a[6]
Added alu0.$auto$insbuf.cc:79:execute$1225: \b [6] -> $abc$921$b[6]
Added alu0.$auto$insbuf.cc:79:execute$1226: $abc$921$result[6] -> \result [6]
Added alu0.$auto$insbuf.cc:79:execute$1227: \a [7] -> $abc$921$a[7]
Added alu0.$auto$insbuf.cc:79:execute$1228: \b [7] -> $abc$921$b[7]
Added alu0.$auto$insbuf.cc:79:execute$1229: $abc$921$result[7] -> \result [7]
Added alu0.$auto$insbuf.cc:79:execute$1230: \a [8] -> $abc$921$a[8]
Added alu0.$auto$insbuf.cc:79:execute$1231: \b [8] -> $abc$921$b[8]
Added alu0.$auto$insbuf.cc:79:execute$1232: $abc$921$result[8] -> \result [8]
Added alu0.$auto$insbuf.cc:79:execute$1233: \a [9] -> $abc$921$a[9]
Added alu0.$auto$insbuf.cc:79:execute$1234: \b [9] -> $abc$921$b[9]
Added alu0.$auto$insbuf.cc:79:execute$1235: $abc$921$result[9] -> \result [9]
Added alu0.$auto$insbuf.cc:79:execute$1236: \a [10] -> $abc$921$a[10]
Added alu0.$auto$insbuf.cc:79:execute$1237: \b [10] -> $abc$921$b[10]
Added alu0.$auto$insbuf.cc:79:execute$1238: $abc$921$result[10] -> \result [10]
Added alu0.$auto$insbuf.cc:79:execute$1239: \a [11] -> $abc$921$a[11]
Added alu0.$auto$insbuf.cc:79:execute$1240: \b [11] -> $abc$921$b[11]
Added alu0.$auto$insbuf.cc:79:execute$1241: $abc$921$result[11] -> \result [11]
Added alu0.$auto$insbuf.cc:79:execute$1242: \a [12] -> $abc$921$a[12]
Added alu0.$auto$insbuf.cc:79:execute$1243: \b [12] -> $abc$921$b[12]
Added alu0.$auto$insbuf.cc:79:execute$1244: $abc$921$result[12] -> \result [12]
Added alu0.$auto$insbuf.cc:79:execute$1245: \a [13] -> $abc$921$a[13]
Added alu0.$auto$insbuf.cc:79:execute$1246: \b [13] -> $abc$921$b[13]
Added alu0.$auto$insbuf.cc:79:execute$1247: $abc$921$result[13] -> \result [13]
Added alu0.$auto$insbuf.cc:79:execute$1248: \a [14] -> $abc$921$a[14]
Added alu0.$auto$insbuf.cc:79:execute$1249: \b [14] -> $abc$921$b[14]
Added alu0.$auto$insbuf.cc:79:execute$1250: $abc$921$result[14] -> \result [14]
Added alu0.$auto$insbuf.cc:79:execute$1251: \a [15] -> $abc$921$a[15]
Added alu0.$auto$insbuf.cc:79:execute$1252: \b [15] -> $abc$921$b[15]
Added alu0.$auto$insbuf.cc:79:execute$1253: $abc$921$result[15] -> \result [15]
Added alu0.$auto$insbuf.cc:79:execute$1254: \a [16] -> $abc$921$a[16]
Added alu0.$auto$insbuf.cc:79:execute$1255: \b [16] -> $abc$921$b[16]
Added alu0.$auto$insbuf.cc:79:execute$1256: $abc$921$result[16] -> \result [16]
Added alu0.$auto$insbuf.cc:79:execute$1257: \a [17] -> $abc$921$a[17]
Added alu0.$auto$insbuf.cc:79:execute$1258: \b [17] -> $abc$921$b[17]
Added alu0.$auto$insbuf.cc:79:execute$1259: $abc$921$result[17] -> \result [17]
Added alu0.$auto$insbuf.cc:79:execute$1260: \a [18] -> $abc$921$a[18]
Added alu0.$auto$insbuf.cc:79:execute$1261: \b [18] -> $abc$921$b[18]
Added alu0.$auto$insbuf.cc:79:execute$1262: $abc$921$result[18] -> \result [18]
Added alu0.$auto$insbuf.cc:79:execute$1263: \a [19] -> $abc$921$a[19]
Added alu0.$auto$insbuf.cc:79:execute$1264: \b [19] -> $abc$921$b[19]
Added alu0.$auto$insbuf.cc:79:execute$1265: $abc$921$result[19] -> \result [19]
Added alu0.$auto$insbuf.cc:79:execute$1266: \a [20] -> $abc$921$a[20]
Added alu0.$auto$insbuf.cc:79:execute$1267: \b [20] -> $abc$921$b[20]
Added alu0.$auto$insbuf.cc:79:execute$1268: $abc$921$result[20] -> \result [20]
Added alu0.$auto$insbuf.cc:79:execute$1269: \a [21] -> $abc$921$a[21]
Added alu0.$auto$insbuf.cc:79:execute$1270: \b [21] -> $abc$921$b[21]
Added alu0.$auto$insbuf.cc:79:execute$1271: $abc$921$result[21] -> \result [21]
Added alu0.$auto$insbuf.cc:79:execute$1272: \a [22] -> $abc$921$a[22]
Added alu0.$auto$insbuf.cc:79:execute$1273: \b [22] -> $abc$921$b[22]
Added alu0.$auto$insbuf.cc:79:execute$1274: $abc$921$result[22] -> \result [22]
Added alu0.$auto$insbuf.cc:79:execute$1275: \a [23] -> $abc$921$a[23]
Added alu0.$auto$insbuf.cc:79:execute$1276: \b [23] -> $abc$921$b[23]
Added alu0.$auto$insbuf.cc:79:execute$1277: $abc$921$result[23] -> \result [23]
Added alu0.$auto$insbuf.cc:79:execute$1278: \a [24] -> $abc$921$a[24]
Added alu0.$auto$insbuf.cc:79:execute$1279: \b [24] -> $abc$921$b[24]
Added alu0.$auto$insbuf.cc:79:execute$1280: $abc$921$result[24] -> \result [24]
Added alu0.$auto$insbuf.cc:79:execute$1281: \a [25] -> $abc$921$a[25]
Added alu0.$auto$insbuf.cc:79:execute$1282: \b [25] -> $abc$921$b[25]
Added alu0.$auto$insbuf.cc:79:execute$1283: $abc$921$result[25] -> \result [25]
Added alu0.$auto$insbuf.cc:79:execute$1284: \a [26] -> $abc$921$a[26]
Added alu0.$auto$insbuf.cc:79:execute$1285: \b [26] -> $abc$921$b[26]
Added alu0.$auto$insbuf.cc:79:execute$1286: $abc$921$result[26] -> \result [26]
Added alu0.$auto$insbuf.cc:79:execute$1287: \a [27] -> $abc$921$a[27]
Added alu0.$auto$insbuf.cc:79:execute$1288: \b [27] -> $abc$921$b[27]
Added alu0.$auto$insbuf.cc:79:execute$1289: $abc$921$result[27] -> \result [27]
Added alu0.$auto$insbuf.cc:79:execute$1290: \a [28] -> $abc$921$a[28]
Added alu0.$auto$insbuf.cc:79:execute$1291: \b [28] -> $abc$921$b[28]
Added alu0.$auto$insbuf.cc:79:execute$1292: $abc$921$result[28] -> \result [28]
Added alu0.$auto$insbuf.cc:79:execute$1293: \a [29] -> $abc$921$a[29]
Added alu0.$auto$insbuf.cc:79:execute$1294: \b [29] -> $abc$921$b[29]
Added alu0.$auto$insbuf.cc:79:execute$1295: $abc$921$result[29] -> \result [29]
Added alu0.$auto$insbuf.cc:79:execute$1296: \a [30] -> $abc$921$a[30]
Added alu0.$auto$insbuf.cc:79:execute$1297: \b [30] -> $abc$921$b[30]
Added alu0.$auto$insbuf.cc:79:execute$1298: $abc$921$result[30] -> \result [30]
Added alu0.$auto$insbuf.cc:79:execute$1299: \a [31] -> $abc$921$a[31]
Added alu0.$auto$insbuf.cc:79:execute$1300: \b [31] -> $abc$921$b[31]
Added alu0.$auto$insbuf.cc:79:execute$1301: $abc$921$result[31] -> \result [31]

14. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \alu0..
Removed 0 unused cells and 205 unused wires.
<suppressed ~1 debug messages>

15. Executing CHECK pass (checking for obvious problems).
checking module alu0..
Warning: Wire alu0.\result [31] is used but has no driver.
Warning: Wire alu0.\result [30] is used but has no driver.
Warning: Wire alu0.\result [29] is used but has no driver.
Warning: Wire alu0.\result [28] is used but has no driver.
Warning: Wire alu0.\result [27] is used but has no driver.
Warning: Wire alu0.\result [26] is used but has no driver.
Warning: Wire alu0.\result [25] is used but has no driver.
Warning: Wire alu0.\result [24] is used but has no driver.
Warning: Wire alu0.\result [23] is used but has no driver.
Warning: Wire alu0.\result [22] is used but has no driver.
Warning: Wire alu0.\result [21] is used but has no driver.
Warning: Wire alu0.\result [20] is used but has no driver.
Warning: Wire alu0.\result [19] is used but has no driver.
Warning: Wire alu0.\result [18] is used but has no driver.
Warning: Wire alu0.\result [17] is used but has no driver.
Warning: Wire alu0.\result [16] is used but has no driver.
Warning: Wire alu0.\result [15] is used but has no driver.
Warning: Wire alu0.\result [14] is used but has no driver.
Warning: Wire alu0.\result [13] is used but has no driver.
Warning: Wire alu0.\result [12] is used but has no driver.
Warning: Wire alu0.\result [11] is used but has no driver.
Warning: Wire alu0.\result [10] is used but has no driver.
Warning: Wire alu0.\result [9] is used but has no driver.
Warning: Wire alu0.\result [8] is used but has no driver.
Warning: Wire alu0.\result [7] is used but has no driver.
Warning: Wire alu0.\result [6] is used but has no driver.
Warning: Wire alu0.\result [5] is used but has no driver.
Warning: Wire alu0.\result [4] is used but has no driver.
Warning: Wire alu0.\result [3] is used but has no driver.
Warning: Wire alu0.\result [2] is used but has no driver.
Warning: Wire alu0.\result [1] is used but has no driver.
Warning: Wire alu0.\result [0] is used but has no driver.
found and reported 32 problems.

16. Printing statistics.

=== alu0 ===

   Number of wires:                353
   Number of wire bits:            449
   Number of public wires:           5
   Number of public wire bits:     101
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                380
     AND2_X1                        24
     AND2_X2                         8
     AND2_X4                         4
     AND3_X1                         7
     AND3_X4                         3
     AND4_X1                         1
     AOI211_X2                       1
     AOI211_X4                       2
     AOI21_X1                       24
     AOI21_X2                        4
     AOI21_X4                        3
     AOI221_X1                       1
     AOI221_X4                       1
     BUF_X1                        100
     BUF_X2                          1
     BUF_X4                          1
     INV_X1                         58
     INV_X2                          3
     INV_X4                          2
     NAND2_X1                        8
     NAND2_X2                        1
     NAND2_X4                        1
     NAND3_X1                        1
     NAND3_X4                        1
     NOR2_X1                        30
     NOR2_X2                         5
     NOR2_X4                         4
     NOR3_X1                        10
     NOR4_X1                         3
     OAI211_X2                       1
     OAI211_X4                       1
     OAI21_X1                       20
     OAI21_X4                        1
     OAI221_X1                       1
     OR2_X1                          4
     OR2_X4                          1
     OR3_X1                          3
     OR3_X2                          1
     OR3_X4                          3
     XNOR2_X1                       22
     XNOR2_X2                        9
     XOR2_X1                         1

   Chip area for module '\alu0': 425.068000

17. Executing Verilog backend.
Dumping module `\alu0'.

Warnings: 40 unique messages, 104 total
End of script. Logfile hash: fa674c7072
CPU: user 0.62s system 0.31s, MEM: 42.48 MB total, 29.88 MB resident
Yosys 0.9 (git sha1 1979e0b)
Time spent: 19% 1x dfflibmap (0 sec), 17% 2x stat (0 sec), ...
